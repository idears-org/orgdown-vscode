#+TITLE: Comprehensive Org Mode Sample
#+AUTHOR: Your Name
#+DATE: <2025-07-31 Thu>
#+OPTIONS: toc:2 num:t
#+FILETAGS: :sample:testing:
#+TODO: TODO(t) NEXT(n) | DONE(d) CANCELED(c)
#+MACRO: version v1.2.3
#+EXPORT_FILE_NAME: my-sample-export
#+LATEX_CLASS: article

#+DESCRIPTION: A comprehensive sample file showcasing the core features of Org Mode, structured according to the official manual.

#+BEGIN_SRC python :results output
   print("Hello, Python from Org Babel!")
#+END_SRC

* 1. Document Structure
  :PROPERTIES:
  :CUSTOM_ID: doc-struct
  :END:
** 1.1. Headlines
   Headlines are the fundamental building blocks of an Org document. They start with one or more stars.

*** Level 3 Headline
**** Level 4 Headline
***** Level 5 Headline

** 1.2. Plain Lists
*** Unordered List
    - Item A
    - Item B
      + Nested Item 1
      + Nested Item 2

*** Ordered List
    1. First item
    2. Second item
       a. Nested lettered item
       b. Another nested item
    3. [@3] This list starts from 3.
    4. And continues.

*** Description List
    - Term 1 :: Description for term 1. Can be on the same line.
    - Term 2 ::
      Description can also be on the next line, and can span multiple paragraphs.

** 1.3. Drawers
   Drawers are used to hide information that is not meant for export or is only relevant in specific contexts.

   :CUSTOM_DRAWER:
   This is a user-defined drawer. It can contain anything.
   :END:

   :LOGBOOK:
   - State "DONE"       from "TODO"       [2025-07-31 Thu 10:00]
   :END:

** 1.4. Blocks
*** Quote Block
    #+BEGIN_QUOTE
    Everything should be made as simple as possible, but not simpler.
    -- Albert Einstein
    #+END_QUOTE

*** Example Block
    #+BEGIN_EXAMPLE
    This is a literal example.
    No markup is applied here.
    #+END_EXAMPLE

*** Center Block
    #+BEGIN_CENTER
    This text is centered.
    #+END_CENTER

*** Verse Block
    #+BEGIN_VERSE
      Great clouds overhead
      Tiny black birds rise and fall
      Snow covers Emacs
    #+END_VERSE

* 2. Markup for Rich Content
** 2.1. Emphasis and Monospace
   - *Bold text*
   - /Italic text/
   - _Underlined text_
   - +Strikethrough text+
   - `Code text` (for code)
   - ~Verbatim text~ (for verbatim output)
   - */Bold and Italic/*
   - This should not be bold: w*ord*. This is valid: (pre*bold*post).

** 2.2. Subscripts and Superscripts
   - H_2O is water.
   - E=mc^2 is famous.
   - A_{complex}_{formula} with multiple characters.

** 2.3. Special Symbols & LaTeX Fragments
   - You can use LaTeX-like symbols like \alpha, \to, or \nbsp.
   - Inline math is written as $E = mc^2$.
   - Displayed equations are on their own lines:
     $$
     \int_0^\infty e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
     $$

** 2.4. Footnotes
   This is a reference to a footnote[fn:1]. You can also have anonymous footnotes[fn::Like this one.]. Or named inline footnotes[fn:named:This is a named inline footnote.].
   [fn:pre-defined] This footnote was defined before its reference.
   This is a reference to the pre-defined footnote [fn:pre-defined].

** 2.5. Horizontal Rules
   A line with five or more dashes creates a horizontal rule.
   -----

** 2.6. Targets & Macros
   This is an invisible target: <<my-target>>.
   Now we can link to it from anywhere: [[my-target]].

   The current version is {{{version}}}.

* 3. TODO Items & Project Management
** 3.1. Basic TODO States
*** TODO This is a task that needs to be done.
*** DONE This task has been completed.

** 3.2. Workflow States & Priorities
*** NEXT [#A] This is the next high-priority task.
*** WAITING [#C] This task is waiting for something else.
*** CANCELED This task was canceled.

** 3.3. Progress Logging & Checkboxes
*** TODO Project with subtasks [2/3]
    - [X] Done
    - [-] Partially done
    - [ ] To be done

*** Another project with percentage cookie [33%]
    - [X] Done
    - [ ] To be done
    - [ ] To be done

** 3.4. TODO Dependencies
   This parent task cannot be marked DONE until its children are done.
*** TODO Parent Task
    :PROPERTIES:
    :ORDERED: t
    :END:
    - [ ] First, do this.
    - [ ] Then, do this.

* 4. Metadata: Tags & Properties
** 4.1. Tags
   Headlines can be tagged for context.                   :work:project:
*** This sub-headline inherits the tags from its parent. :meeting:

** 4.2. Properties
   Properties are key-value pairs associated with an entry.
*** A Book
    :PROPERTIES:
    :Title:     The Hitchhiker's Guide to the Galaxy
    :Author:    Douglas Adams
    :ISBN:      0-345-39180-2
    :END:

* 5. Dates and Times
** 5.1. Timestamps
   - An active timestamp that creates an agenda entry: <2025-08-01 Fri>
   - An active timestamp with a time: <2025-08-01 Fri 18:30>
   - An inactive timestamp that does *not* create an agenda entry: [2025-08-02 Sat]
   - A range of dates: <2025-08-04 Mon>--<2025-08-06 Wed>
   - A time range: <2025-08-07 Thu 09:00-12:00>

** 5.2. Deadlines and Scheduling
*** TODO Write the weekly report
    DEADLINE: <2025-08-08 Fri>
*** TODO Start planning the new project
    SCHEDULED: <2025-08-11 Mon>

** 5.3. Repeated Tasks
*** TODO Pay the rent
    DEADLINE: <2025-09-01 Mon +1m>
*** TODO Check the smoke detectors
    SCHEDULED: <2025-10-01 Wed .+1y>

** 5.4. Clocking Work Time
*** TODO Clocking this task
    :LOGBOOK:
    CLOCK: [2025-07-31 Thu 11:00]--[2025-07-31 Thu 11:30] =>  0:30
    :END:

* 6. Hyperlinks
** 6.1. External and Internal Links
   - External link with description: [[https://orgmode.org][The Org Mode Website]]
   - Bare URL that should be linkified: https://www.gnu.org/software/emacs/
   - Internal link to a headline: [[*1. Document Structure]] or [[#doc-struct][Link to Doc Struct ID]]
   - Link to a file: [[file:./sample.org][Link to this file]]

** 6.2. Link Abbreviations
   #+LINK: gh https://github.com/%s
   You can define link abbreviations, like this one to GitHub: [[gh:org-mode/org-mode]].

* 7. Tables & Spreadsheet
** 7.1. Basic Table
   | Name      | Phone | Age |
   |-----------+-------+-----|
   | Peter     |  1234 |  17 |
   | Anna      |  4321 |  25 |

** 7.2. Table with Alignment and Width Control
   | Item        | <r> | <c> | <l15>         |
   |-------------+-----+-----+---------------|
   | Right       |   1 | C   | Left Aligned  |
   | Centered    |   2 | E   | With Width    |
   | Left        |   3 | N   | Control       |

** 7.3. Spreadsheet with Formulas
   | Item      | Price | Quantity | Total |
   |-----------+-------+----------+-------|
   | Apples    |  0.50 |        5 |  2.50 |
   | Oranges   |  0.60 |        3 |  1.80 |
   |-----------+-------+----------+-------|
   | Total     |       |          |  4.30 |
   #+TBLFM: $4=$2*$3;%.2f::@>$4=vsum(@I..@II);%.2f

* 8. Working with Source Code (Babel)
** 8.1. Basic Code Block Execution
   #+BEGIN_SRC python :results output
   print("Hello, Python from Org Babel!")
   #+END_SRC

   #+RESULTS:
   : Hello, Python from Org Babel!

** 8.2. Code Block with Header Arguments
   This block takes a variable `name` and uses it.
   #+NAME: greeter
   #+BEGIN_SRC shell :var name="World"
   echo "Hello, $name!"
   #+END_SRC

   #+CALL: greeter(name="Org Mode")

   #+RESULTS:
   : Hello, Org Mode!

** 8.3. Noweb Reference Syntax
   You can embed code from one block into another.
   #+NAME: noweb-target
   #+BEGIN_SRC python
   return "a referenced string"
   #+END_SRC

   #+BEGIN_SRC python :noweb yes :results output
   print("This is <<noweb-target()>>.")
   #+END_SRC

   #+RESULTS:
   : This is a referenced string.

** 8.4. Session-based execution
   #+BEGIN_SRC python :session my-session
     x = 10
   #+END_SRC

   #+BEGIN_SRC python :session my-session :results output
     print(f"The value of x from the previous block is: {x}")
   #+END_SRC

   #+RESULTS:
   : The value of x from the previous block is: 10

* 9. Appendix: Advanced & Edge Cases
** 9.1. Include Files
   You can include other Org files into this one.
   #+INCLUDE: "./another-sample.org"

** 9.2. Dynamic Blocks (Clocktable)
   This block dynamically generates a report of clocked time.
   #+BEGIN: clocktable :maxlevel 2 :scope subtree
   #+END:

** 9.3. COMMENTed Subtree
*** COMMENT This entire headline and its content are commented out.
    This text should be treated as a comment.
    - So should this list.

** 9.4. Code Block Injection Highlighting Tests
   The following are injection tests for major languages, useful for verifying syntax highlighting.

*** Python
    #+BEGIN_SRC python
    print("Hello, Python!")
    #+END_SRC

*** Bash
    #+BEGIN_SRC bash
    echo "Hello, Bash!"
    #+END_SRC

*** JavaScript
    #+BEGIN_SRC javascript
    console.log("Hello, JavaScript!");
    #+END_SRC

*** TypeScript
    #+BEGIN_SRC typescript
    console.log("Hello, TypeScript!");
    #+END_SRC

*** JSON
    #+BEGIN_SRC json
    {
      "hello": "json"
    }
    #+END_SRC

*** YAML
    #+BEGIN_SRC yaml
    hello: yaml
    #+END_SRC

*** HTML
    #+BEGIN_SRC html
    <h1>Hello, HTML!</h1>
    #+END_SRC

*** CSS
    #+BEGIN_SRC css
    h1 { color: red; }
    #+END_SRC

*** C++
    #+BEGIN_SRC cpp
    #include <iostream>
    int main() { std::cout << "Hello, C++!" << std::endl; }
    #+END_SRC

*** C
    #+BEGIN_SRC c
    #include <stdio.h>
    int main() { printf("Hello, C!\\n"); }
    #+END_SRC

*** Java
    #+BEGIN_SRC java
    public class Hello { public static void main(String[] args) { System.out.println("Hello, Java!"); } }
    #+END_SRC

*** Go
    #+BEGIN_SRC go
    package main
    import "fmt"
    func main() { fmt.Println("Hello, Go!") }
    #+END_SRC

*** Rust
    #+BEGIN_SRC rust
    fn main() { println!("Hello, Rust!"); }
    #+END_SRC

*** SQL
    #+BEGIN_SRC sql
    SELECT 'Hello, SQL!';
    #+END_SRC

[fn:1] This is the footnote definition.
