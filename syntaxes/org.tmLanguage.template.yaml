# Org Mode TextMate Grammar Template
# This file contains placeholders that will be replaced by build-grammar.ts
# Edit src/grammar/regex.ts for regex patterns, not this file

fileTypes: [org]
name: Org Mode
scopeName: text.org
patterns:
  - { include: '#block' }
repository:
  block:
    patterns:
      - { include: '#headings' }
      - { include: '#lists' }
      - { include: '#horizontal-rules' }
      - { include: '#blocks' }
      # - { include: '#comments' }
      - { include: '#keywords' }
      - { include: '#drawers' }
      - { include: '#planning-lines' }
      # - { include: '#tables' }
      # - { include: '#footnotes' }
      # - { include: '#paragraph' }

  #region HEADLINES
  # Anchor: Common capture groups for Org headlines.
  # Each group corresponds to a semantic part of a headline line.
  # 1: Leading stars (headline level)
  # 2: TODO keyword (if present)
  # 3: Priority marker (e.g. [#A])
  # 4: Priority value
  # 5: Headline title (supports inline markup)
  # 6: Progress indicator (e.g. [50%])
  # 7: Tags (e.g. :tag1:tag2:)
  heading-captures: &heading-captures
    1: { name: '{{scopes.HEADING_PUNCTUATION}}' }
    2: { name: '{{scopes.TODO_KEYWORD}}' }
    3: { name: '{{scopes.PRIORITY_COOKIE}}' }
    4: { name: '{{scopes.PRIORITY_VALUE}}' }
    5:
      name: '{{scopes.HEADING_TITLE}}'
      patterns:
        - include: "#inline-markup"
    6: { name: '{{scopes.PROGRESS_COOKIE}}' }
    7: { name: '{{scopes.TAG}}' }

  # Headings: Two-layer Org headline parsing.
  # First layer: headlineDetectRegex matches any headline line and captures the whole line.
  # Second layer: In the first capture group, patterns match specific headline levels (1-6) and extract semantic parts using heading-captures.
  headings:
    match: "{{regexs.headlineDetectRegex}}"
    name: '{{scopes.HEADING_BLOCK}}'
    captures:
      '1':
        patterns:
          # Each pattern below matches a specific Org headline level and applies semantic captures.
          - name: '{{scopes.HEADING_LEVEL_1}}'
            match: "{{regexs.headlineLevel1Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_2}}'
            match: "{{regexs.headlineLevel2Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_3}}'
            match: "{{regexs.headlineLevel3Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_4}}'
            match: "{{regexs.headlineLevel4Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_5}}'
            match: "{{regexs.headlineLevel5Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_6}}'
            match: "{{regexs.headlineLevel6Regex}}"
            captures:
              <<: *heading-captures
  #endregion

  #region LISTS
  # The '::' separator within a list item
  list-description-separator:
    match: "{{regexs.descriptionSeparatorRegex}}"
    captures:
      1: { name: '{{scopes.DESCRIPTION_TERM}}' }
      2: { name: '{{scopes.DESCRIPTION_SEPARATOR}}' }

  # The [@NN] counter within an ordered list item
  list-counter:
    match: "{{regexs.listCounterRegex}}"
    name: '{{scopes.LIST_COUNTER}}'
    captures:
      1: { name: '{{scopes.LIST_COUNTER_VALUE}}' }

  lists:
    patterns:
      # Unordered lists (which can contain description lists)
      - name: '{{scopes.LIST_UNORDERED_TEXT}}'
        begin: "{{regexs.unorderedListRegex}}"
        end: "(?=$)"
        beginCaptures:
          1: { name: '{{scopes.LEADING_WHITESPACE}}' }
          2: { name: '{{scopes.LIST_BULLET}}' }
          3: { name: '{{scopes.CHECKBOX}}' }
        patterns:
          - { include: '#list-description-separator' }
          - { include: '#inline-markup' }
      # Ordered lists
      - name: '{{scopes.LIST_ORDERED_TEXT}}'
        begin: "{{regexs.orderedListRegex}}"
        end: "(?=$)"
        beginCaptures:
          1: { name: '{{scopes.LEADING_WHITESPACE}}' }
          2: { name: '{{scopes.LIST_BULLET}}' }
          3: { name: '{{scopes.CHECKBOX}}' }
        patterns:
          - { include: '#list-counter' }
          - { include: '#inline-markup' }
  #endregion

  #region HORIZONTAL_RULES
  horizontal-rules:
    name: '{{scopes.HORIZONTAL_RULE}}'
    match: "{{regexs.horizontalRuleRegex}}"
  #endregion

  #region BLOCKS
  block-captures: &block-captures
    '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
    '2': { name: '{{scopes.BLOCK_KEYWORD}}' }
    '3': { name: '{{scopes.BLOCK_NAME}}' }
    '4':
      name: '{{scopes.BLOCK_PARAMETERS}}'
      patterns:
        - { include: '#block-parameter-pair' }

  end-captures: &end-captures
    '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
    '2': { name: '{{scopes.BLOCK_KEYWORD}}' }
    '3': { name: '{{scopes.BLOCK_NAME}}' }

  # Reusable sub-patterns for SRC block headers
  src-block-switch:
    match: '{{regexs.srcSwitchRegex}}'
    captures:
      '1': { name: '{{scopes.BLOCK_SWITCH}}' }

  src-block-header:
    patterns:
      - { include: '#block-parameter-pair' }

  block-parameter-pair:
    match: '{{regexs.blockParameterRegex}}'
    captures:
      '1': { name: '{{scopes.BLOCK_PARAMETER_KEY}}' }
      '2': { name: '{{scopes.BLOCK_PARAMETER_VALUE}}' }

  blocks:
    patterns:
      # Standard (Verbatim)
      - name: '{{scopes.BLOCK_META}} {{scopes.BLOCK_STANDARD_META}}'
        contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.BLOCK_STANDARD_CONTENT}}'
        begin: "{{regexs.standardBlockVerbatimBeginRegex}}"
        end: "{{regexs.standardBlockVerbatimEndRegex}}"
        beginCaptures: { <<: *block-captures }
        endCaptures: { <<: *end-captures }

      # Standard (Markup)
      - name: '{{scopes.BLOCK_META}} {{scopes.BLOCK_STANDARD_META}}'
        contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.BLOCK_STANDARD_CONTENT}}'
        begin: "{{regexs.standardBlockMarkupBeginRegex}}"
        end: "{{regexs.standardBlockMarkupEndRegex}}"
        beginCaptures: { <<: *block-captures }
        endCaptures: { <<: *end-captures }
        patterns:
          - include: "#inline-markup"

      # Dynamic Blocks
      - name: '{{scopes.BLOCK_META}} {{scopes.DYNAMIC_BLOCK_META}}'
        contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.DYNAMIC_BLOCK_CONTENT}}'
        begin: "{{regexs.dynamicBlockBeginRegex}}"
        end: "{{regexs.dynamicBlockEndRegex}}"
        beginCaptures: { <<: *block-captures }
        endCaptures: { <<: *end-captures }
        patterns:
          - include: "#inline-markup"

      # SRC Blocks (injected by build script)
      - include: '#org-src-blocks'

      # Customized Blocks
      - name: '{{scopes.BLOCK_META}} {{scopes.BLOCK_CUSTOMIZED_META}}'
        contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.BLOCK_CUSTOMIZED_CONTENT}}'
        begin: "{{regexs.customizedBlockBeginRegex}}"
        end: "{{regexs.customizedBlockEndRegex}}"
        beginCaptures: { <<: *block-captures }
        endCaptures: { <<: *end-captures }
        patterns:
          - include: "#inline-markup"

  # org-src-blocks is populated by the build-grammar.ts script
  org-src-blocks:
    patterns: []
  #endregion

  #region KEYWORDS
  keywords:
    patterns:
      - name: '{{scopes.KEYWORD}}'
        match: '{{regexs.keywordRegex}}'
        captures:
          '1':
            name: '{{scopes.KEYWORD_KEY}}'
          '2':
            name: '{{scopes.KEYWORD_NAME}}'
          '3':
            name: '{{scopes.KEYWORD_VALUE}}'
  #endregion

  #region DRAWERS
  drawers:
    name: '{{scopes.BLOCK_META}} {{scopes.DRAWER_META}}'
    contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.DRAWER_CONTENT}}'
    begin: '{{regexs.drawerBeginRegex}}'
    end: '{{regexs.drawerEndRegex}}'
    beginCaptures:
      '0':
        name: '{{scopes.BLOCK_KEYWORD}} {{scopes.DRAWER_BEGIN_KEYWORD}}'
      '1':
        name: '{{scopes.DRAWER_NAME}}'
    endCaptures:
      '0':
        name: '{{scopes.BLOCK_KEYWORD}} {{scopes.DRAWER_END_KEYWORD}}'
  #endregion

  #region PLANNING_LINES
  planning-lines:
    name: '{{scopes.PLANNING_LINE_META}}'
    match: '{{regexs.planningLineRegex}}'
    captures:
      '1':
        name: '{{scopes.PLANNING_KEYWORD}}'
      '2':
        name: '{{scopes.PLANNING_TIMESTAMP}}'
  #endregion

  tables:
    name: markup.table.org
    match: "{{regexs.tableRegex}}"

  footnotes:
    patterns:
      - name: meta.footnote.definition.org
        match: "{{regexs.footnoteDefinitionRegex}}"
      - name: meta.footnote.reference.org
        match: "{{regexs.footnoteReferenceRegex}}"

  paragraph:
    begin: "{{regexs.paragraphBeginRegex}}"
    end: "{{regexs.paragraphEndRegex}}"
    patterns:
      - include: "#inline-markup"

  inline-markup:
    patterns:
      - include: "#links"
      - include: "#timestamps-active"
      - include: "#timestamps-inactive"
      - include: "#latex"
      - include: "#bold"
      - include: "#italic"
      - include: "#underline"
      - include: "#strikethrough"
      - include: "#code"
      - include: "#verbatim"
      - include: "#entities"
      - include: "#sub-super-scripts"

  links:
    name: meta.link.org
    match: "{{regexs.linkRegex}}"
    captures:
      1: { name: punctuation.definition.link.begin.org }
      2: { name: '{{scopes.LINK}}' }
      3: { name: string.other.link.description.org }
      4: { name: punctuation.definition.link.end.org }

  timestamps-active:
    name: constant.other.timestamp.active.org
    match: "{{regexs.timestampActiveRegex}}"

  timestamps-inactive:
    name: comment.timestamp.inactive.org
    match: "{{regexs.timestampInactiveRegex}}"

  latex:
    name: markup.math.org
    match: "{{regexs.latexRegex}}"

  bold:
    name: '{{scopes.BOLD}}'
    match: "{{regexs.boldRegex}}"

  italic:
    name: '{{scopes.ITALIC}}'
    match: "{{regexs.italicRegex}}"

  underline:
    name: '{{scopes.UNDERLINE}}'
    match: "{{regexs.underlineRegex}}"

  strikethrough:
    name: '{{scopes.STRIKETHROUGH}}'
    match: "{{regexs.strikethroughRegex}}"

  code:
    name: '{{scopes.CODE}}'
    match: "{{regexs.codeRegex}}"

  verbatim:
    name: '{{scopes.VERBATIM}}'
    match: "{{regexs.verbatimRegex}}"

  entities:
    name: constant.character.entity.org
    match: "{{regexs.entitiesRegex}}"

  sub-super-scripts:
    name: markup.other.sub-super-script.org
    match: "{{regexs.subSuperScriptRegex}}"
