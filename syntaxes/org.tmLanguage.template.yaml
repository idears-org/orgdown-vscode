# Org Mode TextMate Grammar Template
# This file contains placeholders that will be replaced by build-grammar.ts
# Edit src/grammar/regex.ts for regex patterns, not this file

fileTypes: [org]
name: Org Mode
scopeName: text.org
patterns:
  - { include: '#block' }
repository:
  block:
    patterns:
      - { include: '#headings' }
      - { include: '#lists' }
      # - { include: '#comments' }
      - { include: '#keywords' }
      # - { include: '#org-special-blocks' }
      - { include: '#org-src-blocks' }
      # - { include: '#drawers' }
      # - { include: '#horizontal-rules' }
      # - { include: '#tables' }
      # - { include: '#footnotes' }
      # - { include: '#paragraph' }

  #region HEADLINES
  # Anchor: Common capture groups for Org headlines.
  # Each group corresponds to a semantic part of a headline line.
  # 1: Leading stars (headline level)
  # 2: TODO keyword (if present)
  # 3: Priority marker (e.g. [#A])
  # 4: Priority value
  # 5: Headline title (supports inline markup)
  # 6: Progress indicator (e.g. [50%])
  # 7: Tags (e.g. :tag1:tag2:)
  heading-captures: &heading-captures
    1: { name: '{{scopes.HEADING_PUNCTUATION}}' }
    2: { name: '{{scopes.TODO_KEYWORD}}' }
    3: { name: '{{scopes.PRIORITY_COOKIE}}' }
    4: { name: '{{scopes.PRIORITY_VALUE}}' }
    5:
      name: '{{scopes.HEADING_TITLE}}'
      patterns:
        - include: "#inline-markup"
    6: { name: '{{scopes.PROGRESS_COOKIE}}' }
    7: { name: '{{scopes.TAG}}' }

  # Headings: Two-layer Org headline parsing.
  # First layer: headlineDetectRegex matches any headline line and captures the whole line.
  # Second layer: In the first capture group, patterns match specific headline levels (1-6) and extract semantic parts using heading-captures.
  headings:
    match: "{{headlineDetectRegex}}"
    name: '{{scopes.HEADING_BLOCK}}'
    captures:
      '1':
        patterns:
          # Each pattern below matches a specific Org headline level and applies semantic captures.
          - name: '{{scopes.HEADING_LEVEL_1}}'
            match: "{{headlineLevel1Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_2}}'
            match: "{{headlineLevel2Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_3}}'
            match: "{{headlineLevel3Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_4}}'
            match: "{{headlineLevel4Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_5}}'
            match: "{{headlineLevel5Regex}}"
            captures:
              <<: *heading-captures
          - name: '{{scopes.HEADING_LEVEL_6}}'
            match: "{{headlineLevel6Regex}}"
            captures:
              <<: *heading-captures
  #endregion HEADLINES

  #region LISTS
  # The '::' separator within a list item
  list-description-separator:
    match: "{{descriptionSeparatorRegex}}"
    captures:
      1: { name: '{{scopes.DESCRIPTION_TERM}}' }
      2: { name: '{{scopes.DESCRIPTION_SEPARATOR}}' }

  # The [@NN] counter within an ordered list item
  list-counter:
    match: "{{listCounterRegex}}"
    name: '{{scopes.LIST_COUNTER}}'
    captures:
      1: { name: '{{scopes.LIST_COUNTER_VALUE}}' }

  lists:
    patterns:
      # Unordered lists (which can contain description lists)
      - name: '{{scopes.LIST_UNORDERED_TEXT}}'
        begin: "{{unorderedListRegex}}"
        end: "(?=$)"
        beginCaptures:
          1: { name: '{{scopes.LIST_WHITESPACE}}' }
          2: { name: '{{scopes.LIST_BULLET}}' }
          3: { name: '{{scopes.CHECKBOX}}' }
        patterns:
          - { include: '#list-description-separator' }
          - { include: '#inline-markup' }
      # Ordered lists
      - name: '{{scopes.LIST_ORDERED_TEXT}}'
        begin: "{{orderedListRegex}}"
        end: "(?=$)"
        beginCaptures:
          1: { name: '{{scopes.LIST_WHITESPACE}}' }
          2: { name: '{{scopes.LIST_BULLET}}' }
          3: { name: '{{scopes.CHECKBOX}}' }
        patterns:
          - { include: '#list-counter' }
          - { include: '#inline-markup' }
  #endregion LISTS

  # org-block-base structure definition (YAML anchor, content reuse only)
  org-block-base: &org-block-base
    beginCaptures: { "0": { name: punctuation.definition.raw.begin.org } }
    endCaptures: { "0": { name: punctuation.definition.raw.end.org } }
    patterns:
      - include: "#inline-markup"

  # org-src-blocks auto-generated by build-grammar.ts
  org-src-blocks:
    patterns:
      # SRC block language definitions will be auto-generated by the build script
      # For any language not in the list, a fallback pattern will match and highlight the block generically.
      - "{{srcBlockDefinitions}}"

  # org-special-blocks reuse org-block-base
  org-special-blocks:
    patterns:
      - <<: *org-block-base
        name: markup.raw.block.org
        begin: "{{quoteBlockBeginRegex}}"
        end: "{{quoteBlockEndRegex}}"
      - <<: *org-block-base
        name: markup.raw.block.org
        begin: "{{exampleBlockBeginRegex}}"
        end: "{{exampleBlockEndRegex}}"
      - <<: *org-block-base
        name: markup.raw.block.org
        begin: "{{verseBlockBeginRegex}}"
        end: "{{verseBlockEndRegex}}"
      - <<: *org-block-base
        name: markup.raw.block.org
        begin: "{{centerBlockBeginRegex}}"
        end: "{{centerBlockEndRegex}}"
      - <<: *org-block-base
        name: markup.raw.block.org
        begin: "{{commentBlockBeginRegex}}"
        end: "{{commentBlockEndRegex}}"

  keywords:
    patterns:
      - name: '{{scopes.KEYWORD_META}}'
        match: "{{keywordRegex}}"
        captures:
          1: { name: '{{scopes.KEYWORD_MARKER}}' }
          2: { name: '{{scopes.KEYWORD_NAME}}' }
          3: { name: '{{scopes.KEYWORD_VALUE}}' }

  drawers:
    name: meta.drawer.org
    begin: "{{drawerBeginRegex}}"
    end: "{{drawerEndRegex}}"
    beginCaptures:
      0: { name: punctuation.definition.drawer.begin.org }
      1: { name: entity.name.function.drawer.org }
    endCaptures:
      0: { name: punctuation.definition.drawer.end.org }

  tables:
    name: markup.table.org
    match: "{{tableRegex}}"

  horizontal-rules:
    name: markup.other.horizontal-rule.org
    match: "{{horizontalRuleRegex}}"

  footnotes:
    patterns:
      - name: meta.footnote.definition.org
        match: "{{footnoteDefinitionRegex}}"
      - name: meta.footnote.reference.org
        match: "{{footnoteReferenceRegex}}"

  paragraph:
    begin: "{{paragraphBeginRegex}}"
    end: "{{paragraphEndRegex}}"
    patterns:
      - include: "#inline-markup"

  inline-markup:
    patterns:
      - include: "#links"
      - include: "#timestamps-active"
      - include: "#timestamps-inactive"
      - include: "#latex"
      - include: "#bold"
      - include: "#italic"
      - include: "#underline"
      - include: "#strikethrough"
      - include: "#code"
      - include: "#verbatim"
      - include: "#entities"
      - include: "#sub-super-scripts"

  links:
    name: meta.link.org
    match: "{{linkRegex}}"
    captures:
      1: { name: punctuation.definition.link.begin.org }
      2: { name: '{{scopes.LINK}}' }
      3: { name: string.other.link.description.org }
      4: { name: punctuation.definition.link.end.org }

  timestamps-active:
    name: constant.other.timestamp.active.org
    match: "{{timestampActiveRegex}}"

  timestamps-inactive:
    name: comment.timestamp.inactive.org
    match: "{{timestampInactiveRegex}}"

  latex:
    name: markup.math.org
    match: "{{latexRegex}}"

  bold:
    name: '{{scopes.BOLD}}'
    match: "{{boldRegex}}"

  italic:
    name: '{{scopes.ITALIC}}'
    match: "{{italicRegex}}"

  underline:
    name: '{{scopes.UNDERLINE}}'
    match: "{{underlineRegex}}"

  strikethrough:
    name: '{{scopes.STRIKETHROUGH}}'
    match: "{{strikethroughRegex}}"

  code:
    name: '{{scopes.CODE}}'
    match: "{{codeRegex}}"

  verbatim:
    name: '{{scopes.VERBATIM}}'
    match: "{{verbatimRegex}}"

  entities:
    name: constant.character.entity.org
    match: "{{entitiesRegex}}"

  sub-super-scripts:
    name: markup.other.sub-super-script.org
    match: "{{subSuperScriptRegex}}"
