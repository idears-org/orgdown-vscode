# Org Mode TextMate Grammar Template
# Final Refactored Version based on ADR-007

fileTypes: [org]
name: Org Mode
scopeName: '{{scopes.META_DOCUMENT}}'
patterns:
  - include: '#document-root'

repository:
  # region DOCUMENT: The root of the grammar.
  document-root:
    patterns:
      - include: '#file-header'
      - include: '#outline-node'
  # endregion

  # ===================================================================
  # 2. TOP-LEVEL STRUCTURE
  # ===================================================================
  file-header:
    name: '{{scopes.META_HEADER}}'
    begin: '\A(?!\*+\s)' # Anchor to start only if not immediately a headline.
    end: '{{regexs.headlineDetectToCloseBlockRegex}}' # End before the first headline.
    patterns:
      - include: '#line-comments'
      - include: '#blocks'
      - include: '#keyword-like-lines'
      - include: '#lists'
      - include: '#paragraph'

  outline-node:
    name: '{{scopes.META_NODE}}'
    begin: '(^|\G)'
    end: '(?=^\Z)'
    patterns:
      - include: '#headline'
      - include: '#section-content'

  section-content:
    name: '{{scopes.META_SECTION}}'
    begin: '(^|\G)'
    end: '{{regexs.headlineDetectToCloseBlockRegex}}|(?=^\Z)'
    patterns:
      - include: '#line-comments'
      - include: '#blocks'
      - include: '#keyword-like-lines'
      - include: '#lists'
      - include: '#paragraph'
      - match: '^\s*$'
        name: '{{scopes.PUNCTUATION_WHITESPACE}}'

  # ===================================================================
  # 3. ABSTRACT COLLECTIONS
  # ===================================================================
  keyword-like-lines:
    name: '{{scopes.META_DIRECTIVE}}'
    patterns:
      - include: '#include-directive'
      - include: '#planning-lines'
      - include: '#link-abbreviations'
      - include: '#macro-definition'
      - include: '#keywords'

  blocks:
    name: '{{scopes.META_BLOCK}}'
    patterns:
      - include: '#begin-end-blocks'
      - include: '#drawer-blocks'
      - include: '#tables'
      - include: '#horizontal-rules'

  begin-end-blocks:
    name: '{{scopes.META_BEGIN_END_BLOCK}}'
    patterns:
      - include: '#standard-blocks'
      - include: '#dynamic-blocks'
      - include: '#org-src-blocks' # Injected by build script
      - include: '#customized-blocks'

  drawer-blocks:
    name: '{{scopes.META_DRAWER}}'
    patterns:
      - include: '#property-drawer'
      - include: '#drawers'

  # Anchor for all inline markup patterns for easy reuse
  inline-markup-patterns: &inline-markup-patterns
    - include: '#links'
    - include: '#timestamps'
    - include: '#footnotes'
    - include: '#macros'
    - include: '#latex'
    - include: '#bold'
    - include: '#italic'
    - include: '#underline'
    - include: '#strikethrough'
    - include: '#code'
    - include: '#verbatim'
    - include: '#entities'
    - include: '#sub-super-scripts'

  # ===================================================================
  # 4. DETAILED IMPLEMENTATIONS
  # ===================================================================

  #region INCLUDE DIRECTIVE
  include-directive:
    patterns:
      - begin: '{{regexs.includeDirectiveBeginRegex}}'
        beginCaptures:
          '1': { name: '{{scopes.INCLUDE_KEYWORD}}' }
          '2': { name: '{{scopes.INCLUDE_PATH}}' }
        end: '$'
        name: '{{scopes.META_DIRECTIVE}}'
        patterns:
          - begin: '\s+(:\w+)(?=\b)'
            beginCaptures:
              '1': { name: '{{scopes.BLOCK_PARAMETER_KEY}}' }
            end: '$'
            name: '{{scopes.INCLUDE_OPTIONS}}'
  #endregion

  # region COMMENTS
  # Reusable: line comments with inline LaTeX support
  line-comments:
    patterns:
      - begin: '^\s*#\s'
        end: '$'
        name: '{{scopes.COMMENT_LINE}}'
        patterns: *inline-markup-patterns
  #endregion

  #region HEADLINE
  headline-captures: &headline-captures
    '1': { name: '{{scopes.HEADING_PUNCTUATION}}' }
    '2': { name: '{{scopes.TODO_KEYWORD}}' }
    '3': { name: '{{scopes.PRIORITY_COOKIE}}' }
    '4': { name: '{{scopes.PRIORITY_VALUE}}' }
    '5':
      name: '{{scopes.HEADING_TITLE}}'
      patterns: *inline-markup-patterns
    '6': { name: '{{scopes.PROGRESS_COOKIE}}' }
    '7': { name: '{{scopes.TAG}}' }

  headline:
    match: "{{regexs.headlineDetectRegex}}"
    name: '{{scopes.HEADING_BLOCK}}'
    captures:
      '1':
        patterns:
          - name: '{{scopes.HEADING_LEVEL_1}}'
            match: "{{regexs.headlineLevel1Regex}}"
            captures: { <<: *headline-captures }
          - name: '{{scopes.HEADING_LEVEL_2}}'
            match: "{{regexs.headlineLevel2Regex}}"
            captures: { <<: *headline-captures }
          - name: '{{scopes.HEADING_LEVEL_3}}'
            match: "{{regexs.headlineLevel3Regex}}"
            captures: { <<: *headline-captures }
          - name: '{{scopes.HEADING_LEVEL_4}}'
            match: "{{regexs.headlineLevel4Regex}}"
            captures: { <<: *headline-captures }
          - name: '{{scopes.HEADING_LEVEL_5}}'
            match: "{{regexs.headlineLevel5Regex}}"
            captures: { <<: *headline-captures }
          - name: '{{scopes.HEADING_LEVEL_6}}'
            match: "{{regexs.headlineLevel6Regex}}"
            captures: { <<: *headline-captures }
  #endregion

  #region LISTS
  list-description-separator:
    match: "{{regexs.descriptionSeparatorRegex}}"
    captures:
      '1': { name: '{{scopes.DESCRIPTION_TERM}}' }
      '2': { name: '{{scopes.DESCRIPTION_SEPARATOR}}' }

  list-counter:
    match: "{{regexs.listCounterRegex}}"
    name: '{{scopes.LIST_COUNTER}}'
    captures:
      '1': { name: '{{scopes.LIST_COUNTER_VALUE}}' }

  lists:
    patterns:
      - name: '{{scopes.LIST_UNORDERED_TEXT}}'
        begin: "{{regexs.unorderedListRegex}}"
        end: "(?=$)"
        beginCaptures:
          '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
          '2': { name: '{{scopes.LIST_BULLET}}' }
          '3': { name: '{{scopes.CHECKBOX}}' }
        patterns:
          - include: '#list-description-separator'
          - patterns: *inline-markup-patterns
      - name: '{{scopes.LIST_ORDERED_TEXT}}'
        begin: "{{regexs.orderedListRegex}}"
        end: "(?=$)"
        beginCaptures:
          '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
          '2': { name: '{{scopes.LIST_BULLET}}' }
          '3': { name: '{{scopes.CHECKBOX}}' }
        patterns:
          - include: '#list-counter'
          - patterns: *inline-markup-patterns
  #endregion

  #region KEYWORD-LIKE LINES
  keywords:
    name: '{{scopes.KEYWORD}}'
    match: '{{regexs.genericKeywordRegex}}'
    captures:
      '1': { name: '{{scopes.KEYWORD_KEY}}' }
      '2': { name: '{{scopes.KEYWORD_NAME}}' }
      '3': { name: '{{scopes.KEYWORD_VALUE}}' }

  link-abbreviations:
    match: '{{regexs.linkAbbreviationRegex}}'
    name: '{{scopes.LINK_ABBREVIATION_META}}'
    captures:
      '2': { name: '{{scopes.LINK_ABBREVIATION_KEYWORD}}' }
      '3': { name: '{{scopes.LINK_ABBREVIATION_KEY}}' }
      '4': { name: '{{scopes.LINK_ABBREVIATION_URL}}' }

  # Macro definition line: #+MACRO: name body
  macro-definition:
    match: '{{regexs.macroDefinitionRegex}}'
    name: '{{scopes.KEYWORD}}'
    captures:
      '1': { name: '{{scopes.KEYWORD_KEY}}' }
      '2': { name: '{{scopes.MACRO_NAME}}' }
      '3':
        name: '{{scopes.KEYWORD_VALUE}}'
        patterns:
          - match: "(\\$[0-9]+)"
            name: '{{scopes.MACRO_PARAMETER}}'

  planning-lines:
    name: '{{scopes.PLANNING_LINE_META}}'
    match: '{{regexs.planningLineRegex}}'
    captures:
      '1': { name: '{{scopes.PLANNING_KEYWORD}}' }
      '2':
        name: '{{scopes.PLANNING_TIMESTAMP}}'
        patterns:
          - include: "#timestamps"
  #endregion

  #region BLOCKS
  block-captures: &block-captures
    '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
    '2': { name: '{{scopes.BLOCK_KEYWORD}}' }
    '3': { name: '{{scopes.BLOCK_NAME}}' }
    '4':
      name: '{{scopes.BLOCK_PARAMETERS}}'
      patterns:
        - include: '#block-parameter-pair'

  end-captures: &end-captures
    '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
    '2': { name: '{{scopes.BLOCK_KEYWORD}}' }
    '3': { name: '{{scopes.BLOCK_NAME}}' }

  block-parameter-pair:
    match: '{{regexs.blockParameterRegex}}'
    captures:
      '1': { name: '{{scopes.BLOCK_PARAMETER_KEY}}' }
      '2': { name: '{{scopes.BLOCK_PARAMETER_VALUE}}' }

  standard-blocks:
    patterns:
      - name: '{{scopes.META_BEGIN_END_BLOCK}} {{scopes.BLOCK_STANDARD_META}}'
        contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.BLOCK_STANDARD_CONTENT}}'
        begin: "{{regexs.standardBlockVerbatimBeginRegex}}"
        end: "{{regexs.standardBlockVerbatimEndRegex}}"
        beginCaptures: { <<: *block-captures }
        endCaptures: { <<: *end-captures }
      - name: '{{scopes.META_BEGIN_END_BLOCK}} {{scopes.BLOCK_STANDARD_META}}'
        contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.BLOCK_STANDARD_CONTENT}}'
        begin: "{{regexs.standardBlockMarkupBeginRegex}}"
        end: "{{regexs.standardBlockMarkupEndRegex}}"
        beginCaptures: { <<: *block-captures }
        endCaptures: { <<: *end-captures }
        patterns: *inline-markup-patterns

  dynamic-blocks:
    name: '{{scopes.META_BEGIN_END_BLOCK}} {{scopes.DYNAMIC_BLOCK_META}}'
    contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.DYNAMIC_BLOCK_CONTENT}}'
    begin: "{{regexs.dynamicBlockBeginRegex}}"
    end: "{{regexs.dynamicBlockEndRegex}}"
    beginCaptures: { <<: *block-captures }
    endCaptures: { <<: *end-captures }
    patterns: *inline-markup-patterns

  customized-blocks:
    name: '{{scopes.META_BEGIN_END_BLOCK}} {{scopes.BLOCK_CUSTOMIZED_META}}'
    contentName: '{{scopes.BLOCK_CONTENT}} {{scopes.BLOCK_CUSTOMIZED_CONTENT}}'
    begin: "{{regexs.customizedBlockBeginRegex}}"
    end: "{{regexs.customizedBlockEndRegex}}"
    beginCaptures: { <<: *block-captures }
    endCaptures: { <<: *end-captures }
    patterns: *inline-markup-patterns

  # Tables
  tables:
    name: '{{scopes.META_TABLE}}'
    contentName: '{{scopes.TABLE_CONTENT}}'
    begin: '(?={{regexs.tableRegex}})'
    end: '(?=^\s*$|{{regexs.headlineDetectToCloseBlockRegex}})'
    beginCaptures:
      '0': { name: '{{scopes.TABLE_META}}' }
    patterns:
      - include: '#line-comments'
      - match: '^\s*\|\s*[-:]+[+\-:|\s]*\|\s*$'
        name: '{{scopes.TABLE_ROW_SEPARATOR}}'
      - begin: '^\s*(?=\|)'
        name: '{{scopes.TABLE_ROW}}'
        contentName: '{{scopes.TABLE_CONTENT}} {{scopes.TABLE_ROW}}'
        end: '$'
        patterns:
          - begin: '\|\s*'
            beginCaptures:
              '0': { name: '{{scopes.TABLE_CELL_PUNCTUATION}}' }
            contentName: '{{scopes.TABLE_CELL}}'
            end: '\s*(?=\||\+|$)'
            patterns: *inline-markup-patterns

  org-src-blocks: { patterns: [] } # Injected by build script

  property-drawer:
    name: '{{scopes.META_DRAWER}} {{scopes.PROPERTY_DRAWER_META}}'
    begin: '{{regexs.propertyDrawerBeginRegex}}'
    end: '{{regexs.drawerEndRegex}}'
    beginCaptures:
      '0': { name: '{{scopes.DRAWER_BEGIN_KEYWORD}}' }
    endCaptures:
      '0': { name: '{{scopes.DRAWER_END_KEYWORD}}' }
    patterns:
      - include: '#property-line'

  property-line:
    match: '{{regexs.propertyRegex}}'
    name: '{{scopes.PROPERTY_META}}'
    captures:
      '1': { name: '{{scopes.PROPERTY_KEY}}' }
      '2': { name: '{{scopes.PROPERTY_VALUE}}' }

  drawers:
    name: '{{scopes.META_DRAWER}}'
    contentName: '{{scopes.DRAWER_CONTENT}}'
    begin: '{{regexs.genericDrawerBeginRegex}}'
    end: '{{regexs.drawerEndRegex}}'
    beginCaptures:
      '0': { name: '{{scopes.DRAWER_BEGIN_KEYWORD}}' }
      '1': { name: '{{scopes.DRAWER_NAME}}' }
    endCaptures:
      '0': { name: '{{scopes.DRAWER_END_KEYWORD}}' }

  horizontal-rules:
    name: '{{scopes.HORIZONTAL_RULE}}'
    match: "{{regexs.horizontalRuleRegex}}"
  #endregion

  #region INLINE MARKUP & OTHERS
  paragraph:
    begin: "{{regexs.paragraphBeginRegex}}"
    end: "{{regexs.paragraphEndRegex}}"
    patterns: *inline-markup-patterns

  timestamps:
    patterns:
      - name: '{{scopes.TIMESTAMP_ACTIVE_RANGE}}'
        match: '{{regexs.timestampActiveRangeRegex}}'
      - name: '{{scopes.TIMESTAMP_INACTIVE_RANGE}}'
        match: '{{regexs.timestampInactiveRangeRegex}}'
      - name: '{{scopes.TIMESTAMP_ACTIVE}}'
        match: '{{regexs.timestampActiveRegex}}'
      - name: '{{scopes.TIMESTAMP_INACTIVE}}'
        match: '{{regexs.timestampInactiveRegex}}'

  links:
    match: '{{regexs.linkRegex}}'
    name: '{{scopes.LINK_META}}'
    captures:
      '1': { name: '{{scopes.LINK_BEGIN_PUNCTUATION}}' }
      '2':
        name: '{{scopes.LINK}}'
        patterns:
          - include: '#link-protocol'
      '3': { name: '{{scopes.LINK_SEPARATOR_PUNCTUATION}}' }
      '4': { name: '{{scopes.LINK_DESCRIPTION}}' }
      '5': { name: '{{scopes.LINK_END_PUNCTUATION}}' }
  # Footnotes repository block (inline markup and block definition handling)
  footnotes:
    patterns:
      # Single-line footnote definition: capture the label and content on the same line
      - match: "{{regexs.footnoteDefinitionStartRegex}}"
        name: '{{scopes.FOOTNOTE_DEFINITION}} {{scopes.FOOTNOTE_REFERENCE}}'
        captures:
          '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
          '2': { name: '{{scopes.FOOTNOTE_PUNCTUATION}}' }
          '3': { name: '{{scopes.FOOTNOTE_LABEL}}' }
          '4': { name: '{{scopes.PUNCTUATION_WHITESPACE}}' }
          '5': { name: '{{scopes.FOOTNOTE_CONTENT}}' }

      # Footnote definition start (line): [fn:label] content
      - begin: "{{regexs.footnoteDefinitionStartRegex}}"
        beginCaptures:
          '1': { name: '{{scopes.LEADING_WHITESPACE}}' }
          '2': { name: '{{scopes.FOOTNOTE_PUNCTUATION}}' }
          '3': { name: '{{scopes.FOOTNOTE_LABEL}}' }
          '4': { name: '{{scopes.PUNCTUATION_WHITESPACE}}' }
          '5': { name: '{{scopes.FOOTNOTE_CONTENT}}' }
        end: "(?=^\\s*$|{{regexs.headlineDetectToCloseBlockRegex}})"
        contentName: '{{scopes.FOOTNOTE_CONTENT}}'
        patterns:
          - include: *inline-markup-patterns

      # Inline footnote definition: [fn:: content]
      - match: "{{regexs.footnoteInlineDefinitionRegex}}"
        name: '{{scopes.FOOTNOTE_REFERENCE}} {{scopes.FOOTNOTE_PUNCTUATION}}'
        captures:
          '1': { name: '{{scopes.FOOTNOTE_CONTENT}}' }

      # Inline footnote reference: [fn:label]
      - match: "{{regexs.footnoteReferenceRegex}}"
        name: '{{scopes.FOOTNOTE_REFERENCE}} {{scopes.FOOTNOTE_PUNCTUATION}}'
        captures:
          '1': { name: '{{scopes.FOOTNOTE_LABEL}}' }

  link-protocol:
    match: '{{regexs.linkProtocolRegex}}'
    captures:
      '1': { name: '{{scopes.LINK_PROTOCOL}}' }

  latex:
    name: '{{scopes.LATEX}}'
    match: "{{regexs.latexRegex}}"

  bold:
    name: '{{scopes.META_INLINE_BOLD}}'
    contentName: '{{scopes.BOLD}}'
    begin: '{{regexs.boldBeginRegex}}'
    end: '{{regexs.boldEndRegex}}'
    beginCaptures:
      '1': { name: '{{scopes.BOLD_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.BOLD_PUNCTUATION}}' }
    patterns: *inline-markup-patterns

  italic:
    name: '{{scopes.META_INLINE_ITALIC}}'
    contentName: '{{scopes.ITALIC}}'
    begin: '{{regexs.italicBeginRegex}}'
    end: '{{regexs.italicEndRegex}}'
    beginCaptures:
      '1': { name: '{{scopes.ITALIC_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.ITALIC_PUNCTUATION}}' }
    patterns: *inline-markup-patterns

  underline:
    name: '{{scopes.META_INLINE_UNDERLINE}}'
    contentName: '{{scopes.UNDERLINE}}'
    begin: '{{regexs.underlineBeginRegex}}'
    end: '{{regexs.underlineEndRegex}}'
    beginCaptures:
      '1': { name: '{{scopes.UNDERLINE_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.UNDERLINE_PUNCTUATION}}' }
    patterns: *inline-markup-patterns

  strikethrough:
    name: '{{scopes.META_INLINE_STRIKETHROUGH}}'
    contentName: '{{scopes.STRIKETHROUGH}}'
    begin: '{{regexs.strikethroughBeginRegex}}'
    end: '{{regexs.strikethroughEndRegex}}'
    beginCaptures:
      '1': { name: '{{scopes.STRIKETHROUGH_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.STRIKETHROUGH_PUNCTUATION}}' }
    patterns: *inline-markup-patterns

  code:
    name: '{{scopes.META_INLINE_CODE}}'
    contentName: '{{scopes.CODE}}'
    begin: '{{regexs.codeBeginRegex}}'
    end: '{{regexs.codeEndRegex}}'
    beginCaptures:
      '1': { name: '{{scopes.CODE_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.CODE_PUNCTUATION}}' }

  verbatim:
    name: '{{scopes.META_INLINE_VERBATIM}}'
    contentName: '{{scopes.VERBATIM}}'
    begin: '{{regexs.verbatimBeginRegex}}'
    end: '{{regexs.verbatimEndRegex}}'
    beginCaptures:
      '1': { name: '{{scopes.VERBATIM_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.VERBATIM_PUNCTUATION}}' }

  entities:
    name: '{{scopes.ENTITY}}'
    match: "{{regexs.entitiesRegex}}"

  sub-super-scripts:
    name: '{{scopes.SUB_SUPER_SCRIPT}}'
    match: "{{regexs.subSuperScriptRegex}}"

  # Macros (inline) - matches {{{name}}} and {{{name(arg,...)}}}
  macros:
    name: '{{scopes.META_INLINE_MACRO}}'
    begin: "(\\{\\{\\{)"
    end: "(\\}\\}\\})"
    beginCaptures:
      '1': { name: '{{scopes.MACRO_PUNCTUATION}}' }
    endCaptures:
      '1': { name: '{{scopes.MACRO_PUNCTUATION}}' }
    contentName: '{{scopes.MACRO}}'
    patterns:
      - match: "{{regexs.macroNameFragment}}"
        name: '{{scopes.MACRO_NAME}}'
      - match: "{{regexs.macroArgsFragment}}"
        name: '{{scopes.MACRO_PARAMETER}}'
  #endregion
