#+TITLE: [ADR-007] - Work Context Protocol for AI Collaboration
#+DATE: 2025-08-06
#+STATUS: Accepted (Evolved to V4.0 on 2025-08-06)
#+DECIDERS: san, Gemini

* 1. Context and Problem Statement
  :PROPERTIES:
  :Status: Accepted
  :END:

To collaborate effectively on a complex software project, the AI and human developer need a shared, explicit, and robust system for managing not just the *context* of a task, but also the *process* by which the task is executed, the *status* of all tasks project-wide, and the *meta-knowledge* gained during development. This system must enforce best practices, provide a macro-level project view, and facilitate AI learning.

* 2. Decision
We have decided to adopt and evolve a lightweight, file-system-based **"Work Context Protocol" (WCP)**. This protocol formalizes the way we define, load, and manage the context and lifecycle of any given task, effectively creating a project intelligence operating system.

The WCP V4.0 consists of the following core components:

1.  **The `.wcp/` Directory**: A hidden, top-level directory serving as the "workbench" for all tasks.
2.  **The Task Index (`.wcp/_index.org`)**: A master dashboard providing a high-level, queryable overview of all tasks, categorized by status. This file is automatically maintained by the AI.
3.  **The Task File (`.org`)**: The SSoT for a task, featuring a phase-based plan with granular subtask tables and progress logs.
4.  **Task Templates (`.wcp/templates/`)**: A directory of phase-structured templates to bootstrap new tasks with best-practice workflows.
5.  **The Project Intelligence File (`PROJECT_INTELLIGENCE.org`)**: A living document for capturing learned best practices, user preferences, and key project decisions, enabling the AI to improve over time.

* 3. Considered Options

**Option 1: Status Quo (Implicit Context via Chat History)**
- *Description*: Continue relying on the conversational history to manage context.
- *Pros*: No setup required.
- *Cons*: Highly inefficient, unreliable, not scalable, prone to attention drift, and lacks traceability.

**Option 2: Heavyweight Tooling (Custom VS Code Extension)**
- *Description*: Build a dedicated VS Code extension to manage context, with custom commands and UI elements.
- *Pros*: Potentially seamless UI integration within VS Code.
- *Cons*: High development and maintenance cost, lacks portability (tied to a specific editor), and is overly complex for the problem at hand.

**Option 3: Work Context Protocol (The Chosen Option)**
- *Description*: A lightweight protocol based on files and directories, managed via the CLI and editor.
- *Pros*:
  - *Zero-dependency*: Works with any editor and standard CLI tools (`git`).
  - *Portable and Universal*: The principles are applicable to any project or LLM.
  - *Version Controllable*: The entire context and workflow are stored in version-controlled text files.
  - *Self-Documenting*: The `work/` directory becomes a rich, traceable log of the project's history.
  - *Explicit and Reliable*: Provides a clear, unambiguous way to direct the AI's focus.
- *Cons*: Requires discipline from both the human and AI to adhere to the protocol.

* 4. Rationale
The WCP V4.0 architecture was chosen as the culmination of our iterative design process. It evolves beyond simple context and process management to become a holistic project intelligence system. Key advantages include:
- **Macro-to-Micro Visibility**: The combination of the `_index.org` dashboard and granular task files provides seamless navigation from a high-level project overview to the finest details of implementation.
- **Embedded Process & Auditability**: The phase-based, log-structured task files create a self-documenting and auditable trail of all work, enforcing best practices naturally.
- **AI Self-Improvement**: The `PROJECT_INTELLIGENCE.org` file provides a mechanism for the AI to persist and build upon learned knowledge, creating a positive feedback loop of increasing efficiency and personalization.
- **Architectural Cleanliness**: Moving the entire protocol into a hidden `.wcp/` directory cleanly separates the project's meta-work from its source code.

* 5. Consequences

**Positive**:
- Collaboration efficiency will be dramatically improved.
- The AI's focus will be precise and reliable for each task, reducing errors.
- The development process becomes self-documenting; the `work/` directory serves as a detailed project log.
- Onboarding new contributors (human or AI) to a specific task becomes trivial: they just need to read the task file.

**Negative**:
- It introduces a new process that requires discipline to follow.
- It adds a new top-level directory (`work/`) to the project structure.

**Impact**:
- A new `work/` directory with a `templates/` subdirectory will be created.
- The `GEMINI.md` file will be updated to formally define this protocol.
- All new significant tasks (features, bug fixes) will be initiated and managed via this protocol.
