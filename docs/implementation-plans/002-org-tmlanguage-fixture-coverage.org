* OrgDown tmLanguage Coverage & Testing Plan

** Purpose
To ensure OrgDown's tmLanguage provides robust, accurate, and comprehensive syntax highlighting for all Org Mode features by following a systematic, fixture-driven testing workflow.

** Phase 1: Feature-by-Feature Fixture Design
This phase focuses on creating a dedicated test fixture for every individual Org Mode syntax element and its variations. The goal is to isolate each feature to test it thoroughly.

*** Core Syntax Fixtures [23/23]
    - [x] **Headlines**: Levels, TODO keywords, priorities, tags, commented headlines.
      _fixtures: F01-headlines.org, F01-headline-edge-case.org_
      - [x] Manual Review
      - [x] Snapshot Generation
      - [x] Snapshot Diff Analysis
      - [x] Iteration
      - [x] Mark as Complete
    - [x] **Lists**: Unordered, ordered, description, checkboxes (with states).
      _fixtures: F02-lists.org, F03-checkbox-list-edge-cases.org, F04-headline-with-checkbox-list.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Tables**: Simple, with alignment, with formulas.
      _fixtures: F05-tables.org, F06-table-formula-edge-cases.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Blocks**: SRC, EXAMPLE, QUOTE, VERSE, CENTER, COMMENT, custom blocks.
      _fixtures: F07-blocks.org, F08-src-blocks.org, F09-special-block-types.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Drawers**: PROPERTIES, LOGBOOK, custom drawers.
      _fixtures: F10-drawers.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Planning**: SCHEDULED, DEADLINE, CLOSED timestamps.
      _fixtures: F11-planning-line.org, F12-scheduled.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Timestamps**: Active, inactive, ranges, repeaters.
      _fixtures: F13-timestamps.org, F14-timestamp-edge-cases.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Links**: Internal, external, file links, custom IDs, abbreviations.
      _fixtures: F15-links.org, F16-link-abbreviation.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Footnotes**: Definitions and inline references.
      _fixtures: F17-footnote-edge-cases.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Inline Markup**: Bold, italic, underline, verbatim, code, strike-through, `sub_script`, `super^script`.
      _fixtures: F18-inline-markup.org, F19-inline-markup-nesting.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Macros**: Definition and usage.
      _fixtures: F20-macros.org, F21-macro-expansion-edge-cases.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Dynamic Blocks**: Basic structure.
      _fixtures: F22-dynamic-blocks.org, F23-dynamic-block-variants.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Properties**: Inheritance and value types.
      _fixtures: F24-property-inheritance.org, F25-property-value-types.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Horizontal Rules**: Standard `-----`.
      _fixtures: F26-horizontal-rules.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Tags**: In headlines and file-level (`#+FILETAGS:`).
      _fixtures: F27-tags.org, F28-priority-todo-tags-edge-cases.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Keywords**: For various `#+KEY: value` settings like `TITLE`, `AUTHOR`, `OPTIONS`.
      _fixtures: F29-keywords.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Comments**: Line comments, `COMMENT` blocks, and commented subtrees.
      _fixtures: F30-comment-subtree.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Special Blocks**: LATEX, HTML.
      _fixtures: F09-special-block-types.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Multilingual**: Headlines, paragraphs, tables, lists, blocks, drawers, properties, tags, emoji, and plain text in multiple languages (including 中文/Chinese, Japanese, Korean, Russian, Arabic, Hebrew, etc.).
      _fixtures: F31-multilingual-fixture.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Inline LaTeX**: Fragments like `\alpha`.
      _fixtures: F32-inline-latex.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Include**: #+INCLUDE directive and variants.
      _fixtures: F33-include.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Kitchen Sink**: A comprehensive file combining all features for integration testing.
      _fixtures: F34-kitchen-sink.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Archive**: Archive heading with Lists in lists, blocks in lists, etc.
      _fixtures: F35-archive-subtree.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
*** Edge Case & Nesting Fixtures [3/3]
    - [x] **Malformed Syntax**: Incomplete blocks, broken links, unterminated markup.
      _fixtures: F36-malformed-syntax.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Ambiguous Cases**: Syntax that could be interpreted in multiple ways.
      _fixtures: F37-complex-noweb-reference.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete
    - [x] **Blocks Edge Cases**: Nesting, mixed case, parameter errors, block/markup/table/list/headline/drawer/paragraph combinations, custom types, error simulation, etc.
      _fixtures: F38-block-edge-cases.org_
      - [ ] Manual Review
      - [ ] Snapshot Generation
      - [ ] Snapshot Diff Analysis
      - [ ] Iteration
      - [ ] Mark as Complete

** The Test-Driven Grammar Workflow (Based on ADR-005)

This workflow treats regular expressions and fixture definitions as the single source of truth, automating grammar generation and testing. All regex patterns are defined only in `src/grammar/regex.ts` and never duplicated in YAML, JSON, or tests.

1.  **[x] Define/Update Regex**: All regular expressions are now maintained exclusively in `src/grammar/regex.ts` as the single source of truth (SSoT).

2.  **[x] Update Fixture & Mappings**: All fixture files now support per-test-case regex selection via `# Use: <regexName>` annotation. Comment formats are unified and capture group mappings are complete.

3.  **[x] Run Explicit, Data-Driven Tests**: The test runner (`grammar-regex.test.ts`) has been refactored to automatically discover all fixtures and validate group/scope mappings for each test case, supporting per-case regex annotation. All tests are passing.

4.  **[x] Generate Grammar**: The grammar build script now automatically injects regex from SSoT, with YAML/JSON generation fully automated and hands-free.

5.  **[x] Validate & Run Snapshot Test**:
    - Unit and snapshot tests are fully integrated; all changes can be validated with a single command.
    - Snapshot tests capture all syntax interactions and side effects.

6.  **[ ] Mark as Complete**: Once all tests pass and snapshots are approved, the feature can be marked as complete.

** Phase 3: Automation & CI
This phase is now fully automated:

- [x] **Automate Unit & Snapshot Testing**: Unit and snapshot tests are integrated into CI (e.g., GitHub Actions) and run automatically on every commit.
- [x] **Grammar Generation Check**: CI automatically checks that `org.tmLanguage.json` is up-to-date with `regex.ts`. If not, the build fails and developers are prompted to regenerate.
- [x] **Kitchen Sink Validation**: The `kitchen-sink.org` fixture's snapshot test is a key integration checkpoint for cross-feature validation.

** Phase 4: Maintenance & Evolution
Ongoing maintenance and evolution:

- [x] **Issue-Driven Fixes**: All bug fixes strictly follow the workflow: add a failing test case to the relevant fixture, confirm the failure, update the regex in SSoT, and verify all tests pass.
- [x] **Document Known Limitations**: A known limitations document is maintained and updated to clarify edge cases and unsupported syntax.
- [x] **Grammar Refactoring**: `regex.ts` is periodically refactored for readability, maintainability, and improved anchor usage.

** Next Steps
- Expand fixtures and regex as needed. All new features and bug fixes must first be covered by fixture and annotation—no changes to test code required.
- Continue to improve the known limitations document to ensure comprehensive syntax coverage and forward-looking test strategy.
