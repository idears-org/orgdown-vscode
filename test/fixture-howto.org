#+TITLE: Test Fixture Format Guide

* 1. Introduction

This directory contains the test fixtures for Orgdown's grammar unit tests. These files serve as the **Single Source of Truth (SSoT)** for defining the expected behavior of our regular expressions and scoping.

The test runners in `test/unit/grammar-regex.test.ts` and `test/unit/grammar-scoping.test.ts` automatically discover and execute these `.org` files.

* 2. Fixture Structure

Each fixture file is composed of one or more test cases. Each test case MUST follow this structure:

#+BEGIN_SRC org
#+NAME: A clear and descriptive name for the test case
#+BEGIN_FIXTURE
The Org Mode text to be tested against a regex.
#+END_FIXTURE

#+EXPECTED: :type regex :name <regexName>
... regex expected results ...
#+END_SRC

* 3. Core Components

*** 3.1. Test Case Name (`#+NAME`)

- **Purpose**: Uniquely identifies the test case. The name will be used in the test runner's output.
- **Format**: `#+NAME: <Your Descriptive Name>`

*** 3.2. Test Input (`#+BEGIN_FIXTURE`)

- **Purpose**: Contains the raw text input for the test. The input can span multiple lines.
- **Format**: The text must be enclosed in a `#+BEGIN_FIXTURE` / `#+END_FIXTURE` block. This custom block is used to avoid conflicts with standard Org Mode syntax.

  #+BEGIN_FIXTURE
  This is the first line of input.
  This is the second line, which is also part of the input.
  #+END_FIXTURE

*** 3.3. Expected Results (`#+EXPECTED`)

- **Purpose**: Defines the assertion(s) to be made for the test case.
- **Formats**:
  - Regex assertions: `#+EXPECTED: :type regex :name <regexName>` where `<regexName>` MUST be the exact name of a regex constant exported from `common/src/grammar/regex.ts`.
  - Scope assertions: `#+EXPECTED: :type scope` followed by one or more arrow lines in the format `text => scope[, scope2, ...]` (see Section 5).

* 4. Assertion Types

There are two types of assertions you can make.

*** 4.1. Asserting a Match (Regex)

To assert that the input *should* match the regex, provide a table of expected capture group values.

- The table MUST have two columns: `Group #` and `Expected Value`.

- **Important**: There is a critical difference between omitting a group from the table and explicitly setting its value to `undefined`.
  - **Omitting a group**: If a group number is not present in the table, the test runner **will not check it**. This means you don't care about its result.
  - **Value as `undefined`**: If a group's expected value is the literal string `undefined`, the test runner will **assert that the group was not captured** (i.e., its result is `undefined`). This is essential for testing optional capture groups.
  - **Value as empty**: To assert that a group captured an empty string, leave the `Expected Value` cell blank (e.g., `| 1 | |`).

#+BEGIN_SRC org
#+NAME: Example of a matching test
#+BEGIN_FIXTURE
* TODO [#A] A task
#+END_FIXTURE
#+EXPECTED: :type regex :name headlineLevel1Regex
| Group # | Expected Value |
|---------+----------------|
| 1       | *              |
| 2       | TODO           |
| 3       | [#A]           |
| 4       | A              |
| 5       | A task         |
| 7       | undefined      |
# In this example, we assert that group 7 (tags) MUST be undefined.
# We don't care about group 6 (progress), so it's omitted from the table.
#+END_SRC

*** 4.2. Asserting No Match (Regex)

To assert that the input *should not* match the regex, use the keyword `no-match`.

#+BEGIN_SRC org
#+NAME: Example of a non-matching test
#+BEGIN_FIXTURE
This is not a headline.
#+END_FIXTURE
#+EXPECTED: :type regex :name headlineLevel1Regex
no-match
#+END_SRC

*** 4.3. Test style guidance: prefer regex for single-line, scope for multi-line

To keep fixtures precise and easy to maintain, prefer the following guideline when choosing assertion types:

- Single-line constructs (like an isolated headline, inline link, or a single footnote definition line) should primarily use `:type regex` assertions. Regex tests are ideal for verifying capture groups and exact textual structure.
- Begin/end constructs that represent multi-line regions (for example a block, a multi-line footnote definition, a src block, or an example block) should primarily use `:type scope` assertions. Scope assertions express the expected tokenization and are better suited to validating multi-line highlighting and nesting.

Rationale: Regex assertions give tight control over capture groups and are fast to author for single-line expectations. Scope assertions are more robust for region-based highlighting and for tests that must verify token scopes across line boundaries.

You may combine both styles in a single fixture when useful (see Section 7 "One-to-Many Testing"). Prefer the style that makes the test easiest to understand and least brittle.


* 5. Scope Assertions for Theming & Scoping

To make fixtures a complete reference for theme developers, scope expectations are specified with an arrow-based, multi-line, human-friendly format.

- Use `#+EXPECTED: :type scope` followed by one or more lines in the form:
  `text => scope[, scope2, ...]`

- Left side `text` is matched to a single token's exact text. You can quote it with single or double quotes to include spaces or special characters.
- Right side is one or more scope names, comma-separated.
- Matching semantics:
  - The token's scopes MUST include all scopes listed on the right (superset), but may include additional scopes. Scope order is ignored.
  - One assertion consumes exactly one token (no multi-token concatenation).
- Readability helpers (optional):
  - You may indent lines or prefix with `- ` for visual grouping; they will be ignored by the parser.
  - Special placeholders in `text` are supported and will be converted before matching:
    - `<sp:N>` → N spaces
    - `<tab>` → a tab character
    - `<pipe>` → a literal `|`

- Recommended placement:
  - Put a self-explanatory “Show Case” test case near the top of the file, containing both a representative fixture and its scope assertions.
  - Then follow with additional cases (regex or scope) as needed.

**Example (from `F01-headlines.org`)**:
#+BEGIN_SRC org
#+TITLE: Test Suite for Headlines

#+NAME: Complete headline with all elements
#+BEGIN_FIXTURE
* TODO [#A] Complete headline example [2/5] :work:project:
#+END_FIXTURE
#+EXPECTED: :type regex :name headlineLevel1Regex
| Group # | Expected Value            |
|---------+---------------------------|
| 1       | *                         |
| 2       | TODO                      |
| 3       | [#A]                      |
| 4       | A                         |
| 5       | Complete headline example |
| 6       | [2/5]                     |
| 7       | :work:project:            |
#+EXPECTED: :type scope
"*" => markup.heading.org, markup.heading.1.org, punctuation.definition.heading.org
"<sp:1>" => markup.heading.org, markup.heading.1.org
"TODO" => markup.heading.org, markup.heading.1.org, keyword.other.todo.org
... etc.
#+END_SRC

* 6. Special Syntaxes in Results

To handle whitespace and other special characters cleanly in the results table, we use a special syntax. The test runner will parse these strings and convert them to their literal values before making an assertion.

- `<sp:N>`: Represents N space characters.
  - Example: `<sp:1>` becomes `" "`.
  - Example: `<sp:4>` becomes `"    "`.
- `<tab>`: Represents a literal tab character (`\t`).
- `<pipe>`: Represents a literal vertical bar (`|`).

**Example**:
#+BEGIN_SRC org
#+NAME: Space-indented list with checkbox
#+BEGIN_FIXTURE
  - [ ] A task
#+END_FIXTURE
#+EXPECTED: unorderedListRegex
| Group # | Expected Value |
|---------+----------------|
| 1       | <sp:2>         |
| 3       | <sp:1>         |
#+END_SRC

* 7. Advanced: One-to-Many Testing

The test runner supports testing a single input against multiple regular expressions. To do this, simply place multiple `#+EXPECTED` blocks one after another.

#+BEGIN_SRC org
#+NAME: Testing one input against two regexes
#+BEGIN_FIXTURE
* A headline
#+END_FIXTURE

#+EXPECTED: :type regex :name headlineLevel1Regex
| Group # | Expected Value |
|---------+----------------|
| 1       | *              |
| 5       | A headline     |

#+EXPECTED: :type regex :name headlineDetectRegex
| Group # | Expected Value |
|---------+----------------|
| 1       | * A headline   |
#+END_SRC
