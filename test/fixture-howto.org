#+TITLE: Test Fixture Format Guide

* 1. Introduction

This directory contains the test fixtures for Orgdown's grammar unit tests. These files serve as the **Single Source of Truth (SSoT)** for defining the expected behavior of our regular expressions.

The test runner in `test/unit/grammar-regex.test.ts` automatically discovers and executes these `.org` files.

* 2. Fixture Structure

Each fixture file is composed of one or more test cases. Each test case MUST follow this structure:

#+BEGIN_SRC org
#+NAME: A clear and descriptive name for the test case
#+BEGIN_FIXTURE
The Org Mode text to be tested against a regex.
#+END_FIXTURE

#+EXPECTED: regexName
... expected results ...
#+END_SRC

* 3. Core Components

*** 3.1. Test Case Name (`#+NAME`)

- **Purpose**: Uniquely identifies the test case. The name will be used in the test runner's output.
- **Format**: `#+NAME: <Your Descriptive Name>`

*** 3.2. Test Input (`#+BEGIN_FIXTURE`)

- **Purpose**: Contains the raw text input for the test. The input can span multiple lines.
- **Format**: The text must be enclosed in a `#+BEGIN_FIXTURE` / `#+END_FIXTURE` block. This custom block is used to avoid conflicts with standard Org Mode syntax.

  #+BEGIN_FIXTURE
  This is the first line of input.
  This is the second line, which is also part of the input.
  #+END_FIXTURE

*** 3.3. Expected Results (`#+EXPECTED`)

- **Purpose**: Defines the assertion to be made for the test case.
- **Format**: `#+EXPECTED: <regexName>`
  - `<regexName>` MUST be the exact name of a regex constant exported from `common/src/grammar/regex.ts`.

* 4. Assertion Types

There are two types of assertions you can make.

*** 4.1. Asserting a Match

To assert that the input *should* match the regex, provide a table of expected capture group values.

- The table MUST have two columns: `Group #` and `Expected Value`.

- **Important**: There is a critical difference between omitting a group from the table and explicitly setting its value to `undefined`.
  - **Omitting a group**: If a group number is not present in the table, the test runner **will not check it**. This means you don't care about its result.
  - **Value as `undefined`**: If a group's expected value is the literal string `undefined`, the test runner will **assert that the group was not captured** (i.e., its result is `undefined`). This is essential for testing optional capture groups.
  - **Value as empty**: To assert that a group captured an empty string, leave the `Expected Value` cell blank (e.g., `| 1 | |`).

#+BEGIN_SRC org
#+NAME: Example of a matching test
#+BEGIN_FIXTURE
* TODO [#A] A task
#+END_FIXTURE
#+EXPECTED: headlineLevel1Regex
| Group # | Expected Value |
|---------+----------------|
| 1       | *              |
| 2       | TODO           |
| 3       | [#A]           |
| 4       | A              |
| 5       | A task         |
| 7       | undefined      |
# In this example, we assert that group 7 (tags) MUST be undefined.
# We don't care about group 6 (progress), so it's omitted from the table.
#+END_SRC

*** 4.2. Asserting No Match

To assert that the input *should not* match the regex, use the keyword `no-match`.

#+BEGIN_SRC org
#+NAME: Example of a non-matching test
#+BEGIN_FIXTURE
This is not a headline.
#+END_FIXTURE
#+EXPECTED: headlineLevel1Regex
no-match
#+END_SRC

* 5. Scope Documentation for Theming

To make fixtures a complete reference for theme developers, it's crucial to document the expected TextMate scopes.

- **Convention**: At the top of each fixture file, include a `#+BEGIN_COMMENT` block.
- **Content**: This block should clearly list the block-level scopes and the scopes corresponding to each capture group for the relevant regular expressions.

**Example from `F01-headlines.org`**:
#+BEGIN_SRC org
#+TITLE: Test Suite for Headlines

#+BEGIN_COMMENT :description Expected Scopes & Capture Groups:

* === Block Scopes ===
# The following scopes are applied to the entire headline.
- markup.heading.org
- heading.1.org, heading.2.org, etc.

* === Capture Group Scopes ===
# The following scopes are applied to the specific parts of the headline.
1. stars -> punctuation.definition.heading.org
2. todo -> keyword.other.todo.org
3. priority block -> constant.other.priority.org
4. priority letter -> constant.other.priority.value.org
5. headline text -> entity.name.section.org
6. progress/cookie -> constant.other.progress.org
7. tags -> entity.name.tag.org
#+END_COMMENT

... rest of the fixture ...
#+END_SRC

* 6. Special Syntaxes in Results

To handle whitespace and other special characters cleanly in the results table, we use a special syntax. The test runner will parse these strings and convert them to their literal values before making an assertion.

- `<sp:N>`: Represents N space characters.
  - Example: `<sp:1>` becomes `" "`.
  - Example: `<sp:4>` becomes `"    "`.
- `<tab>`: Represents a literal tab character (`\t`).

**Example**:
#+BEGIN_SRC org
#+NAME: Space-indented list with checkbox
#+BEGIN_FIXTURE
  - [ ] A task
#+END_FIXTURE
#+EXPECTED: unorderedListRegex
| Group # | Expected Value |
|---------+----------------|
| 1       | <sp:2>         |
| 3       | <sp:1>         |
#+END_SRC

* 7. Advanced: One-to-Many Testing

The test runner supports testing a single input against multiple regular expressions. To do this, simply place multiple `#+EXPECTED` blocks one after another.

#+BEGIN_SRC org
#+NAME: Testing one input against two regexes
#+BEGIN_FIXTURE
* A headline
#+END_FIXTURE

#+EXPECTED: headlineLevel1Regex
| Group # | Expected Value |
|---------+----------------|
| 1       | *              |
| 5       | A headline     |

#+EXPECTED: headlineDetectRegex
| Group # | Expected Value |
|---------+----------------|
| 1       | * A headline   |
#+END_SRC
