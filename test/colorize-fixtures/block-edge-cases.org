* Blocks Edge Cases

# 1. Block nesting (block inside block)
#+BEGIN_SRC emacs-lisp
#+BEGIN_EXAMPLE
Nested example block inside SRC
#+END_EXAMPLE
(message "Nested block")
#+END_SRC

# 2. Block with mixed case keywords
#+BeGiN_ExAmPlE
MiXeD CaSe example block
#+EnD_ExAmPlE

# 3. Block with invalid/edge parameters
#+BEGIN_SRC python :results invalidparam :exports none
print("param edge case")
#+END_SRC

# 4. Block with headline, drawer, list, table, paragraph, comment
* Headline with block
#+BEGIN_SRC shell
ls -l
#+END_SRC

:LOGBOOK:
#+BEGIN_QUOTE
Drawer with quote block
#+END_QUOTE
:END:

- List item with block:
  #+BEGIN_EXAMPLE
  List example block
  #+END_EXAMPLE

| Table | Block |
|-------+------|
| Row 1 | #+BEGIN_SRC python :results value\n1+1\n#+END_SRC |
| Row 2 | Text |

Paragraph before block
#+BEGIN_COMMENT
Comment block after paragraph
#+END_COMMENT

# 5. Block with inline markup and special characters
#+BEGIN_SRC org
*bold* /italic/ =code= ~verbatim~ _underline_ +strike+
Special chars: !@#$%^&*()[]{}
#+END_SRC

# 6. Custom block type and error simulation
#+BEGIN_CUSTOM-BLOCK-TYPE
Custom block content
#+END_CUSTOM-BLOCK-TYPE

#+BEGIN_SRC emacs-lisp :results value
(/ 1 0) ; error simulation
#+END_SRC

# 7. Unterminated/malformed block
#+BEGIN_SRC python
print("unterminated block")
# missing END_SRC

# 8. Block with ambiguous/overlapping syntax
#+BEGIN_SRC org
#+BEGIN_QUOTE
Ambiguous block start
#+END_SRC
#+END_QUOTE
